import streamlit as st
import moviepy.editor as mp
import tempfile
import os
import numpy as np
import matplotlib.pyplot as plt
from transformers import pipeline
import openai

# Hugging Face ASR model
asr_pipeline = pipeline("automatic-speech-recognition", model="facebook/wav2vec2-large-960h")

# Set up Azure OpenAI API credentials
openai.api_key = os.getenv("AZURE_OPENAI_API_KEY")

# Function to transcribe video using Hugging Face's ASR model
def transcribe_video(video_path):
    audio_path = "temp_audio.wav"
    video = mp.VideoFileClip(video_path)
    video.audio.write_audiofile(audio_path)
    transcription = asr_pipeline(audio_path)["text"]
    os.remove(audio_path)
    return transcription

# Function to analyze emotions using Azure OpenAI API
def analyze_emotions(transcription):
    response = openai.Completion.create(
        engine="davinci",
        prompt=f"Analyze the following text for emotions such as honesty, anxiety, confidence, fear, anger, and irritation:\n\n{transcription}\n\nProvide the analysis as a dictionary.",
        max_tokens=150
    )
    analysis = response.choices[0].text.strip()
    emotion_scores = eval(analysis)
    return emotion_scores

# Function to check for plagiarism and AI-generated content
def check_plagiarism_ai(answer):
    plagiarism_check_prompt = f"Check if the following answer is plagiarized:\n\n{answer}\n\nRespond with 'True' if plagiarized, else 'False'."
    ai_check_prompt = f"Check if the following answer is generated by AI:\n\n{answer}\n\nRespond with 'True' if generated by AI, else 'False'."

    plagiarism_response = openai.Completion.create(
        engine="davinci",
        prompt=plagiarism_check_prompt,
        max_tokens=5
    )
    ai_response = openai.Completion.create(
        engine="davinci",
        prompt=ai_check_prompt,
        max_tokens=5
    )

    is_plagiarized = plagiarism_response.choices[0].text.strip().lower() == 'true'
    is_ai_generated = ai_response.choices[0].text.strip().lower() == 'true'

    return is_plagiarized, is_ai_generated

# Streamlit app
st.title("Candidate Video Analysis and Answer Verification")

uploaded_file = st.file_uploader("Upload a Video File", type=["mp4", "mov", "avi"])

if uploaded_file is not None:
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(uploaded_file.getvalue())
        video_path = temp_file.name

    st.video(video_path)

    if st.button("Analyze Video"):
        with st.spinner('Transcribing video...'):
            transcription = transcribe_video(video_path)
            st.subheader("Transcription")
            st.write(transcription)

        with st.spinner('Analyzing emotions...'):
            emotion_scores = analyze_emotions(transcription)

            st.subheader("Emotion Analysis Results")
            st.write(emotion_scores)

            # Display emotion analysis results in a pie chart
            labels = list(emotion_scores.keys())
            sizes = list(emotion_scores.values())
            colors = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#c2c2f0', '#ffb3e6']
            fig, ax = plt.subplots()
            ax.pie(sizes, colors=colors, labels=labels, autopct='%1.1f%%', startangle=90)
            ax.axis('equal')
            st.pyplot(fig)

            st.success('Analysis Complete')

# Answer submission and analysis section
st.header("Submit Test Answers")

questions = [
    "Question 1: ...",
    "Question 2: ...",
    "Question 3: ...",
    # Add more questions as needed
]

answers = []
for question in questions:
    st.subheader(question)
    answer = st.text_area(f"Answer to {question}", height=100)
    answers.append(answer)

if st.button("Submit Answers"):
    results = []
    for answer in answers:
        is_plagiarized, is_ai_generated = check_plagiarism_ai(answer)
        results.append({
            "answer": answer,
            "plagiarized": is_plagiarized,
            "ai_generated": is_ai_generated
        })

    st.subheader("Answer Analysis Results")
    for idx, result in enumerate(results):
        st.write(f"Answer {idx+1}:")
        st.write(f"Text: {result['answer']}")
        st.write(f"Plagiarized: {result['plagiarized']}")
        st.write(f"AI Generated: {result['ai_generated']}")
        st.write("")

    # You can store these results and display them in a dashboard
    with open("results_dashboard.html", "w") as f:
        f.write("<html><body><h2>Answer Analysis Results</h2>")
        for idx, result in enumerate(results):
            f.write(f"<h3>Answer {idx+1}:</h3>")
            f.write(f"<p>Text: {result['answer']}</p>")
            f.write(f"<p>Plagiarized: {result['plagiarized']}</p>")
            f.write(f"<p>AI Generated: {result['ai_generated']}</p>")
            f.write("<br>")
        f.write("</body></html>")
    st.success("Results have been saved to 'results_dashboard.html'")
