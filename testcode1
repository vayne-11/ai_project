from flask import Flask, render_template, request, redirect, url_for, jsonify
import os
import tempfile
import openai
import moviepy.editor as mp
from transformers import pipeline
import matplotlib.pyplot as plt

app = Flask(__name__)

# Set up Azure OpenAI API credentials
openai.api_key = os.getenv("AZURE_OPENAI_API_KEY")

# Hugging Face ASR model
asr_pipeline = pipeline("automatic-speech-recognition", model="facebook/wav2vec2-large-960h")

# Function to transcribe video using Hugging Face's ASR model
def transcribe_video(video_path):
    audio_path = "temp_audio.wav"
    video = mp.VideoFileClip(video_path)
    video.audio.write_audiofile(audio_path)
    transcription = asr_pipeline(audio_path)["text"]
    os.remove(audio_path)
    return transcription

# Function to analyze emotions using Azure OpenAI API
def analyze_emotions(transcription):
    response = openai.Completion.create(
        engine="davinci",
        prompt=f"Analyze the following text for emotions such as honesty, anxiety, confidence, fear, anger, and irritation:\n\n{transcription}\n\nProvide the analysis as a dictionary.",
        max_tokens=150
    )
    analysis = response.choices[0].text.strip()
    emotion_scores = eval(analysis)
    return emotion_scores

# Function to check for plagiarism and AI-generated content
def check_plagiarism_ai(answer):
    plagiarism_check_prompt = f"Check if the following answer is plagiarized:\n\n{answer}\n\nRespond with 'True' if plagiarized, else 'False'."
    ai_check_prompt = f"Check if the following answer is generated by AI:\n\n{answer}\n\nRespond with 'True' if generated by AI, else 'False'."

    plagiarism_response = openai.Completion.create(
        engine="davinci",
        prompt=plagiarism_check_prompt,
        max_tokens=5
    )
    ai_response = openai.Completion.create(
        engine="davinci",
        prompt=ai_check_prompt,
        max_tokens=5
    )

    is_plagiarized = plagiarism_response.choices[0].text.strip().lower() == 'true'
    is_ai_generated = ai_response.choices[0].text.strip().lower() == 'true'

    return is_plagiarized, is_ai_generated

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/upload_video', methods=['POST'])
def upload_video():
    if 'video' not in request.files:
        return redirect(url_for('index'))

    video_file = request.files['video']
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        video_file.save(temp_file.name)
        video_path = temp_file.name

    transcription = transcribe_video(video_path)
    emotion_scores = analyze_emotions(transcription)
    
    return render_template('result.html', transcription=transcription, emotion_scores=emotion_scores)

@app.route('/submit_answers', methods=['POST'])
def submit_answers():
    answers = request.form.getlist('answers')
    results = []

    for answer in answers:
        is_plagiarized, is_ai_generated = check_plagiarism_ai(answer)
        results.append({
            "answer": answer,
            "plagiarized": is_plagiarized,
            "ai_generated": is_ai_generated
        })

    # Store results for the dashboard
    with open("results_dashboard.html", "w") as f:
        f.write("<html><body><h2>Answer Analysis Results</h2>")
        for idx, result in enumerate(results):
            f.write(f"<h3>Answer {idx+1}:</h3>")
            f.write(f"<p>Text: {result['answer']}</p>")
            f.write(f"<p>Plagiarized: {result['plagiarized']}</p>")
            f.write(f"<p>AI Generated: {result['ai_generated']}</p>")
            f.write("<br>")
        f.write("</body></html>")

    return redirect(url_for('dashboard'))

@app.route('/dashboard')
def dashboard():
    return render_template('dashboard.html')

if __name__ == '__main__':
    app.run(debug=True)
